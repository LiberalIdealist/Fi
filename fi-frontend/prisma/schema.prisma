datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                  String            @id @default(cuid())
  name                String?
  email               String?           @unique
  emailVerified       DateTime?
  password            String?
  image               String?
  accounts            Account[]
  sessions            Session[]
  profile             Profile?
  financialProfile    FinancialProfile? @relation("UserToFinancialProfile") // Remove fields & references here
  financialDocuments  FinancialDocument[]
}

model FinancialProfile {
  id        String   @id @default(uuid())
  userId    String   @unique // Ensure only one FinancialProfile per user
  user      User     @relation("UserToFinancialProfile", fields: [userId], references: [id], onDelete: Cascade)
  responses Json
  riskScore Int?     // Calculated risk score based on answers
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Profile {
  id                     String   @id @default(cuid())
  userId                 String   @unique // Add this line
  user                   User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  completedQuestionnaire Boolean  @default(false)
  riskScore              Int?
  investmentStyle        String?
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt
}

model FinancialDocument {
  id        String   @id @default(cuid())
  userEmail String
  fileName  String
  fileUrl   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userEmail], references: [email])

  @@index([userEmail])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
